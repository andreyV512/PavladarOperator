// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "unFmShowZones.h"
// ----------------------
#include "unSQLDbModule.h"
#include "unTUtils.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TfmShowZones *fmShowZones;

// ---------------------------------------------------------------------------

__fastcall TfmShowZones::TfmShowZones(TComponent* Owner) : TForm(Owner) {

	// -----------------
}

// { переводит координаты из мм в пиксели }
int GetYFromMM(int pixelsY, int _mmY) {
	int res = 0;
	res = int(pixelsY / 25.4 * _mmY);
	return res;
}

int GetXFromMM(int pixelsX, int _mmX) {
	int res = 0;
	res = int(pixelsX / 25.4 * _mmX);
	return res;
}

// ---------------------------------------------------------------------------
void __fastcall TfmShowZones::EcrossBorder10Exit(TObject *Sender) {
	TEdit* ed = (TEdit*)Sender;
	double ret = (double)StrToFloatDef(ed->Text, -1);
	if (ret < 0) {
		ed->SetFocus();
		return;
	}
	ed->Font->Color = clWindowText;
	ed->Font->Style = TFontStyles();
	SaveBorders();
}
// ---------------------------------------------------------------------------

void __fastcall TfmShowZones::EcrossBorder10KeyDown(TObject *Sender, WORD &Key, TShiftState Shift) {
	TEdit* ed = (TEdit*)Sender;
	if (Key == VK_RETURN) {
		double ret = (double)StrToFloatDef(ed->Text, -1);
		if (ret < 0) {
			ed->Font->Color = clHotLight;
			ed->Font->Style = TFontStyles() << fsBold;
			return;
		}
		ed->Font->Color = clWindowText;
		ed->Font->Style = TFontStyles();
		SaveBorders();
	}
	else {
		ed->Font->Color = clHotLight;
		ed->Font->Style = TFontStyles() << fsBold;
	}
}

// ---------------------------------------------------------------------------
void TfmShowZones::SaveBorders() {
	// зафикируем значения границ

}

void __fastcall TfmShowZones::ChartCrossClickSeries(TCustomChart *Sender, TChartSeries *Series, int ValueIndex, TMouseButton Button, TShiftState Shift, int X, int Y) {
	int zoneNum = ValueIndex;
	int sensorNum = Series->SeriesIndex;
	// Series->ValueColor[ValueIndex] = clBlue;
	// fmMain->workX502.workData->ResetAllData(msgLast);
	if (isZoneMarked) {
		MarkerOff();
	}
	else {
		MarkerSet(zoneNum, sensorNum);
		ShowZoneData(zoneNum, sensorNum);
		// OnDblClick(zoneNum, sensorNum, true);
	}
}

int TfmShowZones::ShowZoneData(int _zone, int _sensor) {
	int err = 0;
	// serg
	try {

		// // PrepareZoneToShow(TWorkX502* _vzWorkX502, int _moduleType, int _selZone, int _selSensor,AnsiString _title);
		// int res = pFmViewZone->PrepareZoneToShow(crossWorkX502, 2, _zone, realSensorNum, "Показ зоны: " + IntToStr(_zone + 1) + " датчик: " + IntToStr(_sensor + 1));
		// if (res < 0) {
		// MessageDlg("Детализация отсутствует или некорректна!!!\n Просмотр невозможен!", mtError, TMsgDlgButtons() << mbOK, NULL);
		// }
		// else {
		fmViewZone = new TfmViewZone(NULL);
		fmViewZone->ShowModal();
		delete fmViewZone;
		// //закрылась форма с просмотром
		// PostMessage(Application->Handle, WM_USER + 500, 33, 0);
		// }
		// return 0;
		// }
		// __finally {
		// MarkerOff();
		err = 0;
	}
	catch (Exception *ex) {
		err = -1;
		TLog::ErrFullSaveLog(ex);
		// AnsiString msg
		// programSettings.colorMSG = programSettings.colorBrak;
		// TExtFunction::UpdateStatusBar(programSettings.gsStatusBar, strStatus, _msg, programSettings.colorMSG);
		MessageDlg(ex->Message, mtError, TMsgDlgButtons() << mbOK, NULL);
	}
	return err;
}

// ---------------------------------------------------------------------------
void TfmShowZones::MarkerSet(int _zone, int _sensor) {
	// MarkerOff();
	// serg
	// int s = ChartCross->SeriesCount();
	// if (_sensor < 0 || _sensor >= ChartCross->SeriesCount())
	// return;
	// int z = ChartCross->Series[_sensor]->Count();
	// if (_zone < 0 || _zone >= ChartCross->Series[_sensor]->Count())
	// return;
	// selectZone = _zone;
	// selectSensor = _sensor;
	// colorMark = ChartCross->Series[_sensor]->ValueColor[_zone];
	// isZoneMarked = true;
	// ChartCross->Series[_sensor]->ValueColor[_zone] = clBlue;
}

void TfmShowZones::MarkerOff(void) {
	// serg
	// if (!isZoneMarked)
	// return;
	// isZoneMarked = false;
	// if (ChartCross->Series[selectSensor]->Count() > selectZone)
	// ChartCross->Series[selectSensor]->ValueColor[selectZone] = colorMark;
}

void __fastcall TfmShowZones::SplitterTopMoved(TObject *Sender) {
	PanelCross->Height = SplitterTop->Top;
	PanelLong->Top = SplitterTop->Top + SplitterTop->Height;
}
// ---------------------------------------------------------------------------

void __fastcall TfmShowZones::FormCreate(TObject *Sender) {
	PanelLong->Align = alNone;
}
// ---------------------------------------------------------------------------

void __fastcall TfmShowZones::FormClose(TObject *Sender, TCloseAction &Action) {
	int err = 0;
	try { // ("currentSettings", "ParamValueFloat", "isActual=1 and UPPER(ParamName)=UPPER('PanelThickTop')"
		SqlDBModule->UpdIntSql("currentSettings", "ParamValueFloat", PanelThick->Height, "isActual=1 and UPPER(ParamName)=UPPER('PanelThickHeight')");
		SqlDBModule->UpdIntSql("currentSettings", "ParamValueFloat", PanelCross->Height, "isActual=1 and UPPER(ParamName)=UPPER('PanelCrossHeight')");
		err = 0;
	}
	catch (Exception *ex) {
		err = -1;
		TLog::ErrFullSaveLog(ex);
		// AnsiString msg
		// programSettings.colorMSG = programSettings.colorBrak;
		// TExtFunction::UpdateStatusBar(programSettings.gsStatusBar, strStatus, _msg, programSettings.colorMSG);
		MessageDlg(ex->Message, mtError, TMsgDlgButtons() << mbOK, NULL);
	}
}

// ---------------------------------------------------------------------------
void __fastcall TfmShowZones::SplitterMidMoved(TObject *Sender) {
	PanelLong->Height = SplitterMid->Top;
	PanelThick->Top = SplitterMid->Top + SplitterMid->Height;
}

// ---------------------------------------------------------------------------
void __fastcall TfmShowZones::bbtPrintClick(TObject *Sender) {
	printer = Printer();
	PrintResult(printer, poPortrait, 20, 10);
}

int TfmShowZones::PrintResult(TPrinter* _printer, TPrinterOrientation _orientation, int _beginPrinterXPmm, int _beginPrinterYPmm) {
	int err = 0;
	int resPrinterY;
	int resPrinterX;
	int beginPrinterX = _beginPrinterXPmm * 10;
	int beginPrinterY = _beginPrinterYPmm * 10;
	div_t scaleY;
	div_t scaleX;
	AnsiString strOut;
	int hStr;
	int hInterStr;
	TPoint curPos;
	int m = 0;
	int dd = 10;
	int iconW, iconH;
	int beginText;
	int mmx, mmy, vertSize, HorzSize;
	try {
		if (PrintDialog->Execute()) {
			// var bmp:TBitMap;
			// bmp:=Tbitmap.Create;
			// bmp.Canvas.Handle:=getdc(DBGrid1.Handle);
			_printer->Title = "Общего результата контроля";
			// image = new TImage(NULL);
			image = imageTop;
			_printer->BeginDoc();
			// serg
			// SetMapMode(_printer->Canvas->Handle, MM_TEXT);
			// m = GetMapMode(_printer->Canvas->Handle);
			// в этом режиме лог пиксел=0,1 мм, отчет по осям идет вправо и вверх
			SetMapMode(_printer->Canvas->Handle, MM_LOMETRIC);
			mmx = GetDeviceCaps(_printer->Canvas->Handle, PHYSICALWIDTH) / GetDeviceCaps(_printer->Canvas->Handle, LOGPIXELSX) * 25.4; // точек на мм
			mmy = GetDeviceCaps(_printer->Canvas->Handle, PHYSICALHEIGHT) / GetDeviceCaps(_printer->Canvas->Handle, LOGPIXELSY) * 25.4;
			// размер печатного поля в 0,1 мм
			vertSize = (int)(mmy) * 10; // в 0,1 мм
			HorzSize = (int)(mmx) * 10;
			// проверка на установку режима, должен быть 2
			m = GetMapMode(_printer->Canvas->Handle);
			// высота строки в мм
			_printer->Canvas->Font->Size = 4;
			// hStr = _printer->Canvas->Font->Size * 4 + 12;
			hStr = (int)_printer->Canvas->Font->Size * 10;
			// межстрочный
			hInterStr = _printer->Canvas->Font->Size / 2 * 10;
			// { Получить информацию о принтере }
			resPrinterX = GetDeviceCaps(_printer->Canvas->Handle, LOGPIXELSX);
			resPrinterY = GetDeviceCaps(_printer->Canvas->Handle, LOGPIXELSY);
			// ширина и высота эмблемки
			iconW = 20 * 10;
			iconH = (int)iconW * 3 / 4;
			PrintImage(imageTop, NULL, printer, poPortrait, (int)beginPrinterX / 10, (int)beginPrinterY / 10, iconW, iconH, false);
			// вернем цвет пера и кисти
			printer->Canvas->Pen->Color = clBlack;
			printer->Canvas->Brush->Color = clWhite;
			// сдвинем перо от рисунка
			printer->Canvas->MoveTo(beginPrinterX + 450, -beginPrinterY);
			curPos = printer->Canvas->PenPos;
			// -----------
			strOut = "Протокол неразрушающего контроля от: " + FormatDateTime("yyyy.mm.dd hh:mm", Now()); ;
			_printer->Canvas->TextOut(beginPrinterX + 450, printer->Canvas->PenPos.Y, strOut);
			// --------1-1
			beginText = beginPrinterX + iconW + 50;
			strOut = stringGridTop->Cells[0][0] + ": " + stringGridTop->Cells[0][1];
			_printer->Canvas->TextOut(beginText, (int)printer->Canvas->PenPos.Y - (hStr + hInterStr), strOut);
			// -------2-2
			strOut = stringGridTop->Cells[1][0] + ": " + stringGridTop->Cells[1][1];
			printer->Canvas->TextOut(1200, printer->Canvas->PenPos.Y, strOut);
			// // --------3-1
			strOut = stringGridTop->Cells[2][0] + ": " + stringGridTop->Cells[2][1];
			_printer->Canvas->TextOut(beginText, (int)printer->Canvas->PenPos.Y - (hStr + hInterStr), strOut);
			// -----------4-2
			strOut = stringGridTop->Cells[3][0] + ": " + stringGridTop->Cells[3][1];
			_printer->Canvas->TextOut(1200, printer->Canvas->PenPos.Y, strOut);
			// ----------5-1
			strOut = stringGridTop->Cells[4][0] + ": " + stringGridTop->Cells[4][1];
			_printer->Canvas->TextOut(beginText, (int)printer->Canvas->PenPos.Y - (hStr + hInterStr), strOut);
			// 6-2
			strOut = stringGridTop->Cells[5][0] + ": " + stringGridTop->Cells[5][1];
			_printer->Canvas->TextOut(1200, printer->Canvas->PenPos.Y, strOut);
			// 7-1
			strOut = stringGridTop->Cells[6][0] + ": " + stringGridTop->Cells[6][1];
			_printer->Canvas->TextOut(beginText, (int)printer->Canvas->PenPos.Y - (hStr + hInterStr), strOut);
			// 8-2
			strOut = stringGridTop->Cells[7][0] + ": " + stringGridTop->Cells[7][1];
			_printer->Canvas->TextOut(1200, printer->Canvas->PenPos.Y, strOut);
			// printf(" 10 div 3 = % d remainder % d \n ",x.quot, x.rem);
			scaleX = div(resPrinterX, fmShowZones->PixelsPerInch);
			scaleY = div(resPrinterY, fmShowZones->PixelsPerInch);
			_printer->Canvas->MoveTo(beginText, (int)printer->Canvas->PenPos.Y - (hStr + hInterStr));
			// _printer->Canvas->LineTo(HorzSize - 200, (int)printer->Canvas->PenPos.Y);
			// SRCCOPY обеспечивает нормальное копирование, SRCINVERT конвертирует пиксели источника и приемника при помощи операнда ИЛИ, SRCAND связывает пиксели при помощи операнда И.
			SetStretchBltMode(_printer->Canvas->Handle, HALFTONE);
			if (chbWithPict->Checked) {
				// будем считать, что у нас всегда формат А4
				StretchBlt(printer->Canvas->Handle, beginPrinterX, (int)(printer->Canvas->PenPos.Y - (hStr + hInterStr)), (int)iconW / 10, -iconH, fmShowZones->Canvas->Handle, 0,
					0, fmShowZones->Width, fmShowZones->Height, SRCCOPY);
				// int PrintGridCanvas(TStringGrid *_grid, TPrinter* _printer, TPrinterOrientation _orientation, int _beginPrinterXmm, int _beginPrinterYmm, int _widgthMm, int _heigtMm,bool _independently)
				// PrintGridCanvas(strGridCross, printer, poPortrait, beginPrinterXMm, curPos.Y, imW, imH, false);
				_printer->NewPage();
				PrintGrid("Поперечник", strGridCross, printer, poPortrait, (int)(beginPrinterX / 10), -20, 15, 15, 15, false);
				printer->NewPage();
				PrintGrid("Продольник", strGridLong, _printer, poPortrait, (int)(beginPrinterX / 10), -20, 15, 15, 15, false);
				printer->NewPage();
				PrintGrid("Толщиномер", strGridThick, _printer, poPortrait, (int)(beginPrinterX / 10), -20, 15, 15, 15, false);
			}
			else {
				curPos = printer->Canvas->PenPos;
				PrintGrid("Поперечник", strGridCross, _printer, poPortrait, (int)(beginPrinterX / 10), (int)(_printer->Canvas->PenPos.Y + 100) / 10, 15, 15, 15, false);
				printer->NewPage();
				PrintGrid("Продольник", strGridLong, _printer, poPortrait, (int)(beginPrinterX / 10), -20, 15, 15, 15, false);
				printer->NewPage();
				PrintGrid("Толщиномер", strGridThick, _printer, poPortrait, (int)(beginPrinterX / 10), -20, 15, 15, 15, false);
			}
			_printer->EndDoc();
		}
		else {
			//
		}
		err = 0;
	}
	catch (Exception *ex) {
		err = -1;
		TLog::ErrFullSaveLog(ex);
		// AnsiString msg
		// programSettings.colorMSG = programSettings.colorBrak;
		// TExtFunction::UpdateStatusBar(programSettings.gsStatusBar, strStatus, _msg, programSettings.colorMSG);
		MessageDlg(ex->Message, mtError, TMsgDlgButtons() << mbOK, NULL);
	}
	return err;
	// -------------------
}

// ---------------------------------------------------------------------------

// ----------
int TfmShowZones::PrintImage(TImage* _image, AnsiString _filename, TPrinter* _printer, TPrinterOrientation _orientation, int _beginPrinterXmm, int _beginPrinterYmm,
	int _widgthIcon, int _heightIcon, bool _isPrinting) {
	int err = 0;
	double widgthMm = 0;
	double heigtMm = 0;
	TPoint curPos;
	int beginPrinterX = _beginPrinterXmm * 10;
	int beginPrinterY = _beginPrinterYmm * 10;
	try {
		if (_filename != NULL) {
			_image->Picture->LoadFromFile(_filename);
		}
		else {
			//
		}
		if (_isPrinting) {
			_printer->BeginDoc();
			_printer->Orientation = _orientation;
		}
		else {
			//
		}
		SetMapMode(_printer->Canvas->Handle, MM_LOMETRIC);
		SetStretchBltMode(printer->Canvas->Handle, HALFTONE);
		_printer->Canvas->Pen->Width = 3;
		_printer->Canvas->Pen->Color = clBlue;
		_printer->Canvas->Brush->Color = clWhite;
		curPos = _printer->Canvas->PenPos;
		_printer->Canvas->FrameRect(Rect(500, -600, 1000, -1000));
		// вторая пара правый нижний угол
		_printer->Canvas->Rectangle(Rect(beginPrinterX, -beginPrinterY, beginPrinterX + _widgthIcon, -(_heightIcon + beginPrinterY)));
		// а тут начала, длина и ширина
		StretchBlt(_printer->Canvas->Handle, beginPrinterX, -beginPrinterY, _widgthIcon, -_heightIcon, fmShowZones->Canvas->Handle, _image->Left, _image->Top, _image->Width,
			_image->Height, SRCCOPY);
		if (_isPrinting) {
			_printer->EndDoc();
		}
		else {
			//
		}
	}
	catch (Exception *ex) {
		err = -1;
		TLog::ErrFullSaveLog(ex);
		// AnsiString msg
		// programSettings.colorMSG = programSettings.colorBrak;
		// TExtFunction::UpdateStatusBar(programSettings.gsStatusBar, strStatus, _msg, programSettings.colorMSG);
		MessageDlg(ex->Message, mtError, TMsgDlgButtons() << mbOK, NULL);
	}
	return err;
}

void __fastcall TfmShowZones::strGridCrossDrawCell(TObject *Sender, int ACol, int ARow, TRect &Rect, TGridDrawState State) {
	TStringGrid* grid = static_cast<TStringGrid*>(Sender);
	int err = 0;
	double val = 0;
	try {
		if (ACol > 0 && ARow > 0) {
			AnsiString aStr = grid->Cells[ACol][ARow];
			// function TryStrToFloat(const S: string; out Value: Extended; const AFormatSettings: TFormatSettings): Boolean;
			if (TryStrToFloat(grid->Cells[ACol][ARow], val)) {
				//
			}
			else {
				val = -1;
			}
			if (val > TGlSettings::thresholdC1) {
				grid->Canvas->Brush->Color = clRed;
			}
			else {
				grid->Canvas->Brush->Color = clMoneyGreen;
			}
			if (val == -1) {
				grid->Canvas->Brush->Color = clWhite;
			}
			else {
				//
			}
			grid->Canvas->FillRect(Rect);
			grid->Canvas->TextOut(Rect.Left, Rect.Top, grid->Cells[ACol][ARow]);
		}
		else {
			//
		}

		err = 0;
	}
	catch (Exception *ex) {
		err = -1;
		TLog::ErrFullSaveLog(ex);
		// AnsiString msg
		// programSettings.colorMSG = programSettings.colorBrak;
		// TExtFunction::UpdateStatusBar(programSettings.gsStatusBar, strStatus, _msg, programSettings.colorMSG);
		MessageDlg(ex->Message, mtError, TMsgDlgButtons() << mbOK, NULL);
	}
}

// ---------------------------------------------------------------------------
void __fastcall TfmShowZones::ApplicationEventsMessage(tagMSG &Msg, bool &Handled) {
	if (Msg.message == TGlSettings::msgFmViewZone) {
		// isZoneMarked=false;
		if (Msg.message == TGlSettings::msgFmViewZone) // идентификатор наш
		{
			// WinExec(" hh. .\\. .\\ help \\ Help.chm ", SW_RESTORE);
			// strGridCrossSelectCell(strGridCross, selACol, selARow, canSelect);
			Handled = true;

		}
		else {
			//
		}
	}
	else {
		//
	}

}

// ---------------------------------------------------------------------------
void __fastcall TfmShowZones::FormShow(TObject *Sender) {
	stringGridTop->Align = alClient;
	stringGridTop->ColCount = 11;
	stringGridTop->RowCount = 2;
	stringGridTop->DefaultRowHeight = (int)stringGridTop->Height / stringGridTop->RowCount;
	stringGridTop->DefaultColWidth = (int)stringGridTop->Width / stringGridTop->ColCount * 1.2;
	// serg
	// TGlSettings::thresholdTNom=6.0;
	// ------------
	TSensorD* sensor;
	AnsiString strSql = "";
	double *Y;
	int err = 0;
	int s = 0;
	int row = 0;
	try {
		isLoadFm = true;
		// serg
		strSql = "SELECT numTube";
		for (int i = 0; i < TGlSettings::countZones; i++) {
			strSql += ",Z" + IntToStr(i + 1);
		}
		strSql += ",resultSum,sensorNum";
		strSql += " FROM resultCross where numTube=:ptube_id order by sensorNum";
		for (int i = 0; i < strGridCross->RowCount; i++) { // заголовки строк
			strGridCross->Cells[0][i + 1] = "Дат. " + IntToStr(i + 1);
		}
		strGridCross->Cells[0][0] = "Дат./Зоны";
		// заголовки столбцов
		for (int z = 0; z < TGlSettings::countZones; z++) {
			strGridCross->Cells[z + 1][0] = "Зона " + IntToStr(z + 1);
		}
		// по зонам поперечник
		SqlDBModule->queryQuick->Close();
		SqlDBModule->queryQuick->SQL->Text = strSql;
		SqlDBModule->queryQuick->Parameters->ParamByName("ptube_id")->Value = numTube;
		SqlDBModule->queryQuick->Open();
		if (SqlDBModule->queryQuick->RecordCount == 0) {
			MessageDlg("Поперечник - данных нет!", mtWarning, TMsgDlgButtons() << mbOK, NULL);
		}
		else {
			SqlDBModule->queryQuick->First();

			while (!SqlDBModule->queryQuick->Eof) {
				for (int z = 0; z < TGlSettings::countZones; z++) {
					double val = 0;
					AnsiString fn = "Z" + IntToStr(z + 1);
					if (SqlDBModule->queryQuick->FieldByName("Z" + IntToStr(z + 1)) == NULL) {
						val = -1;
					}
					else {
						val = SqlDBModule->queryQuick->FieldByName("Z" + IntToStr(z + 1))->AsFloat;
					}
					strGridCross->Cells[z + 1][s + 1] = FloatToStrF(val, ffFixed, 6, 2);
				}
				SqlDBModule->queryQuick->Next();
				s++;
			}
		}
		SqlDBModule->queryQuick->Close();
		strGridCross->DefaultRowHeight = 16;
		// strGridCross->Cells->
		// --------------------
		strSql = "SELECT numTube";
		for (int i = 0; i < TGlSettings::countZones; i++) {
			strSql += ",Z" + IntToStr(i + 1);
		}
		strSql += ",resultSum,sensorNum";
		strSql += " FROM resultLong where numTube=:ptube_id order by sensorNum";
		Y = new double[err];
		// strGridLong
		for (int i = 0; i < strGridLong->RowCount; i++) {
			strGridLong->Cells[0][i + 1] = "Дат. " + IntToStr(i + 1);
		}
		strGridLong->Cells[0][0] = "Д/Зоны";
		// заголовки столбцов Продольник
		for (int z = 0; z < TGlSettings::countZones; z++) {
			strGridLong->Cells[z + 1][0] = "Зона " + IntToStr(z + 1);
		}
		// по зонам Продольник
		SqlDBModule->queryQuick->Close();
		SqlDBModule->queryQuick->SQL->Text = strSql;
		SqlDBModule->queryQuick->Parameters->ParamByName("ptube_id")->Value = numTube;
		SqlDBModule->queryQuick->Open();
		if (SqlDBModule->queryQuick->RecordCount == 0) {
			MessageDlg("Продольник - данных нет!", mtWarning, TMsgDlgButtons() << mbOK, NULL);
		}
		else {
			SqlDBModule->queryQuick->First();
			s = 0;
			while (!SqlDBModule->queryQuick->Eof) {
				for (int z = 0; z < TGlSettings::countZones; z++) {
					AnsiString fn = "Z" + IntToStr(z + 1);
					double val = 0;
					if (SqlDBModule->queryQuick->FieldByName("Z" + IntToStr(z + 1)) == NULL) {
						val = -1;
					}
					else {
						val = SqlDBModule->queryQuick->FieldByName("Z" + IntToStr(z + 1))->AsFloat;
					}
					strGridLong->Cells[z + 1][s + 1] = FloatToStrF(val, ffFixed, 6, 2);
				}
				SqlDBModule->queryQuick->Next();
				s++;
			}
		}
		SqlDBModule->queryQuick->Close();
		strGridLong->DefaultRowHeight = 16;
		s = 0;
		// -------------------- Толщиномер
		strSql = "SELECT numTube";
		for (int i = 0; i < TGlSettings::countZones; i++) {
			strSql += ",Z" + IntToStr(i + 1);
		}
		strSql += ",resultSum,sensorNum";
		strSql += " FROM resultThick where numTube=:ptube_id order by sensorNum";
		for (int i = 0; i < strGridThick->RowCount; i++) {
			int ii = strGridThick->RowCount - (i + 1);
			strGridThick->Cells[0][i + 1] = IntToStr(ii);
		}
		strGridThick->Cells[0][0] = "мм/Зоны";
		// заголовки Толщиномер
		for (int z = 0; z < TGlSettings::countZones; z++) {
			strGridThick->Cells[z + 1][0] = "Зона " + IntToStr(z + 1);
		}
		// по зонам
		SqlDBModule->queryQuick->Close();
		SqlDBModule->queryQuick->SQL->Text = strSql;
		SqlDBModule->queryQuick->Parameters->ParamByName("ptube_id")->Value = numTube;
		SqlDBModule->queryQuick->Open();
		if (SqlDBModule->queryQuick->RecordCount == 0) {
			MessageDlg("Толщиномер - данных нет!", mtWarning, TMsgDlgButtons() << mbOK, NULL);
		}
		else {
			SqlDBModule->queryQuick->First();
			row = 6; // у толщиномера 1 строка в БД
			while (!SqlDBModule->queryQuick->Eof) {
				for (int z = 0; z < TGlSettings::countZones; z++) {
					AnsiString fn = "Z" + IntToStr(z + 1);
					double val = 0.0;
					if (SqlDBModule->queryQuick->FieldByName("Z" + IntToStr(z + 1)) == NULL) {
						val = -1;

					}
					else {
						val = SqlDBModule->queryQuick->FieldByName("Z" + IntToStr(z + 1))->AsFloat;
						// убежим по гриду вверх или вниз, в зависимости он толщины
						double tmp = Floor(val + 0.555);
						int cRow = strGridThick->RowCount - Floor(val + 0.555);
						if (cRow >= strGridThick->RowCount) {
							cRow = strGridThick->RowCount - 1;
						}
						else {
							if (cRow < 1) {
								cRow = 1;
							}
							else {
								//
							}
						}
						strGridThick->Cells[z + 1][cRow] = FloatToStrF(val, ffFixed, 6, 2);
					}

				}
				SqlDBModule->queryQuick->Next();
			}
		}
		SqlDBModule->queryQuick->Close();
		strGridThick->DefaultRowHeight = 16;

		delete Y;
		err = 0;
	}
	catch (Exception *ex) {
		err = -1;
		TLog::ErrFullSaveLog(ex);
		// AnsiString msg
		// programSettings.colorMSG = programSettings.colorBrak;
		// TExtFunction::UpdateStatusBar(programSettings.gsStatusBar, strStatus, _msg, programSettings.colorMSG);
		MessageDlg(ex->Message, mtError, TMsgDlgButtons() << mbOK, NULL);
	}
	// return err;
}

// ------------------------
int TfmShowZones::PrintGrid(AnsiString _title, TStringGrid *_grid, TPrinter* _printer, TPrinterOrientation _orientation, int _beginPrinterXmm, int _beginPrinterYmm,
	int headerSizeMm, int footerSizeMm, int _colPerPage, bool _isPrinting) {
	int err = 0;
	int P, I, J, YPos, XPos, HorzSize, vertSize, horzSizeDisp;
	int countPage, numPage, rowCount, HeaderSize, FooterSize, rowHeight, FontHeight;
	int beginX = _beginPrinterXmm * 10;
	int beginY = _beginPrinterYmm * 10;
	double mmx, mmy, mmXD, mmYD, mmD;
	AnsiString Footer;
	TPoint curPos;
	int heightGrid = 0;
	int widthCol = 0;
	bool isNewGroup = false;
	try {
		// Верхний колонтитул, нижний колонтитул, межстрочный интервал, размер шрифта
		HeaderSize = headerSizeMm * 10;
		FooterSize = footerSizeMm * 10;
		rowHeight = 18;
		heightGrid = _grid->RowCount * rowHeight;
		FontHeight = 18;
		// Инициализировать принтер
		if (_isPrinting) {
			_printer->Orientation = _orientation;
			_printer->Title = _title;
			_printer->BeginDoc();
		}
		else {

		}

		// Установите шаг на мм
		mmx = GetDeviceCaps(_printer->Canvas->Handle, PHYSICALWIDTH) / GetDeviceCaps(_printer->Canvas->Handle, LOGPIXELSX) * 25.4; // точек на мм
		mmy = GetDeviceCaps(_printer->Canvas->Handle, PHYSICALHEIGHT) / GetDeviceCaps(_printer->Canvas->Handle, LOGPIXELSY) * 25.4;
		mmD = fmShowZones->PixelsPerInch / 25.4;
		// размер печатного поля в 0,1 мм
		vertSize = (int)(mmy) * 10 + beginY; // в 0,1 мм
		HorzSize = (int)(mmx) * 10 - beginX;
		horzSizeDisp = fmShowZones->Width * mmD;
		SetMapMode(_printer->Canvas->Handle, MM_LOMETRIC);
		// Задайте количество строк, которые влезут на лист
		rowCount = (int)(vertSize - HeaderSize - FooterSize) / rowHeight; // div Любой остаток отвергается. Mod  Выполняет целочисленное деление, возвращая остаток
		// Определите количество страниц
		if (_grid->RowCount % rowCount != 0) {
			countPage = (int)_grid->RowCount / rowCount + 1;
		}
		else {
			countPage = _grid->RowCount / rowCount;
		}
		//
		numPage = 1;
		// Сетка для печати
		// for (int P = 1; P <= countPage; P++) {
		// заголовок
		_printer->Canvas->Font->Height = 24;
		_printer->Canvas->TextOut((HorzSize / 2 - (_printer->Canvas->TextWidth(_title) / 2)), beginY - HeaderSize + 30, _title);
		_printer->Canvas->Pen->Width = 2;
		// _printer->Canvas->MoveTo(beginX, beginY - HeaderSize);
		// _printer->Canvas->LineTo(HorzSize, beginY - HeaderSize);
		// низ
		// _printer->Canvas->MoveTo(beginX, beginY-(vertSize + FooterSize));
		// _printer->Canvas->LineTo(HorzSize, beginY-(vertSize + FooterSize));
		_printer->Canvas->Font->Height = 24;
		Footer = "Страница: " + IntToStr(numPage) + " из " + IntToStr(countPage);
		_printer->Canvas->TextOut((HorzSize / 2 - (_printer->Canvas->TextWidth(Footer) / 2)), beginY - (vertSize + FooterSize), Footer);
		// ///Печатные линии
		_printer->Canvas->Font->Height = FontHeight;
		// for (int I = 1; I < rowCount; I++) {
		// if (_grid->RowCount >= I + (numPage - 1) * rowCount) {
		// XPos = beginX;
		// // for (J = 0; J < _grid->ColCount - 1; J++) {
		// for (J = 0; J < _colPerPage; J++) {
		// _printer->Canvas->TextOut(XPos, -YPos, _grid->Cells[J][I + (numPage - 1) * rowCount - 1]);
		// TPoint curPos = _printer->Canvas->PenPos;
		// _printer->Canvas->FrameRect(TRect(XPos, -YPos, curPos.X, -curPos.Y));
		// XPos = XPos + _grid->ColWidths[J] * 2;
		// curPos = _printer->Canvas->PenPos;
		// _printer->Canvas->LineTo(HorzSize, -YPos);
		// // if (HorzSize - XPos + _grid->ColWidths[J] * 2 < 0) {
		// // YPos = YPos + (rowSize + 1) * _grid->RowCount;
		// // break;
		// // }
		// // else {
		// //
		// // }
		// }
		// YPos = YPos + rowHeight;
		// }
		// else {
		// //
		// }
		// }
		// // //Добавить страницу
		// numPage++;
		// if (numPage <= countPage) {
		// _printer->NewPage();
		// }
		// else {
		// //
		// }
		// }
		// --------------------------
		int nc = 0;
		XPos = beginX;
		YPos = beginY - HeaderSize - 50;
		_printer->Canvas->MoveTo(XPos, YPos);
		widthCol = (int)(HorzSize - beginX) / _colPerPage;
		for (int c = 0; c < (TGlSettings::countZones + 1); c++) {
			curPos = _printer->Canvas->PenPos;
			// // проверка по вертикали
			// int p = YPos;
			// int e = -(vertSize + FooterSize);
			// if (p < e && isNewGroup) {
			// _printer->NewPage();
			// numPage++;
			// XPos = beginX;
			// YPos = -HeaderSize - 10;
			// }
			// else {
			// //
			// }
			for (int r = 0; r < _grid->RowCount; r++) {
				AnsiString out = "";
				if (_grid->Cells[c][r].Length() == 0) {
					out = "NULL";
				}
				else {
					out = _grid->Cells[c][r];
				}
				_printer->Canvas->TextOut(XPos, YPos, out);
				// _grid->ColWidths[J] * 2 < 0)
				YPos = YPos - rowHeight;
			}
			int t = (c) % (_colPerPage + 1);
			if ((c % _colPerPage == 0) && (c != 0)) {
				XPos = beginX;
				YPos = YPos - 50;
				// проверка по вертикали
				int p = YPos;
				int e = -(vertSize + FooterSize);
				if (p < e) {
					_printer->NewPage();
					numPage++;
					XPos = beginX;
					YPos = -HeaderSize - 10;
				}
				else {
					//
				}
				// выведем первый столбец для второй и последующих групп
				for (int r = 0; r < _grid->RowCount; r++) {
					AnsiString out = "";
					if (_grid->Cells[0][r].Length() == 0) {
						out = "NULL";
					}
					else {
						out = _grid->Cells[0][r];
					}
					_printer->Canvas->TextOut(XPos, YPos, out);
					// _grid->ColWidths[J] * 2 < 0)
					YPos = YPos - rowHeight;
				}
				XPos = XPos + widthCol;
				YPos = YPos + heightGrid;
			}
			else {
				isNewGroup = false;
				XPos = XPos + widthCol;
				YPos = YPos + heightGrid;
			}
		}
		// ---------------
		if (_isPrinting) {
			_printer->EndDoc();
		}
		else {

		}

	}
	catch (Exception *ex) {
		err = -1;
		TLog::ErrFullSaveLog(ex);
		// AnsiString msg
		// programSettings.colorMSG = programSettings.colorBrak;
		// TExtFunction::UpdateStatusBar(programSettings.gsStatusBar, strStatus, _msg, programSettings.colorMSG);
		MessageDlg(ex->Message, mtError, TMsgDlgButtons() << mbOK, NULL);
	}
	return err;

	//
	// //Example
	// procedure TForm1.Button1Click(Sender: TObject);
	// begin
	// //Drucken im Querformat
	// PrintStringGrid(Grid, 'StringGrid Print Landscape', poLandscape);
	// //Drucken im Hochformat
	// PrintStringGrid(Grid, 'StringGrid Print Portrait', poPortrait);
}

// ---------------------------------------------------------------------------
int TfmShowZones::PrintGridCanvas(TStringGrid *_grid, TPrinter* _printer, TPrinterOrientation _orientation, int _beginPrinterXmm, int _beginPrinterYmm, int _widgthMm, int _heigtMm,
	bool _independently) {
	int err = 0;
	int mmX, mmY, vertSizePage, horzSizePage, canCol, maxWidthGrid, maxHeghtGrid;
	TPoint curPos;
	try {
		if (_independently) {
			_printer->BeginDoc();
			_printer->Orientation = _orientation;
		}
		else {
			//
		}
		SetMapMode(_printer->Canvas->Handle, MM_LOMETRIC);
		SetStretchBltMode(_printer->Canvas->Handle, HALFTONE);
		curPos = _printer->Canvas->PenPos;
		// Масштабирование
		mmX = GetDeviceCaps(_printer->Canvas->Handle, PHYSICALWIDTH) / GetDeviceCaps(_printer->Canvas->Handle, LOGPIXELSX) * 25.4;
		mmY = GetDeviceCaps(_printer->Canvas->Handle, PHYSICALHEIGHT) / GetDeviceCaps(_printer->Canvas->Handle, LOGPIXELSY) * 25.4;
		vertSizePage = (int)((mmY) - _beginPrinterYmm) * 10;
		horzSizePage = (int)((mmX) - _beginPrinterXmm - 10) * 10;
		canCol = 20;
		maxWidthGrid = canCol * _grid->DefaultColWidth;
		maxHeghtGrid = _grid->Height * 1.2;
		if ((curPos.Y + maxHeghtGrid) < horzSizePage) {
			StretchBlt(_printer->Canvas->Handle, _beginPrinterXmm*10, -_beginPrinterYmm*10, horzSizePage, -maxHeghtGrid, _grid->Canvas->Handle, _grid->Left, _grid->Top,
				maxWidthGrid, _grid->Height, SRCCOPY);
			_printer->Canvas->MoveTo(_beginPrinterXmm*10, (curPos.Y - _grid->Height - 10));
		}
		else {
			//
		}
		if (_independently) {
			_printer->EndDoc();
		}
		else {
			//
		}
	}
	catch (Exception *ex) {
		err = -1;
		TLog::ErrFullSaveLog(ex);
		// AnsiString msg
		// programSettings.colorMSG = programSettings.colorBrak;
		// TExtFunction::UpdateStatusBar(programSettings.gsStatusBar, strStatus, _msg, programSettings.colorMSG);
		MessageDlg(ex->Message, mtError, TMsgDlgButtons() << mbOK, NULL);
	}
	return err;
}

void __fastcall TfmShowZones::strGridLongDrawCell(TObject *Sender, int ACol, int ARow, TRect &Rect, TGridDrawState State) {
	TStringGrid* grid = static_cast<TStringGrid*>(Sender);
	int err = 0;
	double val = 0;
	try { // не трогаем заголовки и первый столбец
		if (ACol > 0 && ARow > 0) {
			AnsiString aStr = grid->Cells[ACol][ARow];
			// function TryStrToFloat(const S: string; out Value: Extended; const AFormatSettings: TFormatSettings): Boolean;
			if (TryStrToFloat(grid->Cells[ACol][ARow], val)) {
				//
			}
			else {
				val = -1;
			}
			if (val > TGlSettings::thresholdL1) {
				grid->Canvas->Brush->Color = clRed;
			}
			else {
				grid->Canvas->Brush->Color = clMoneyGreen;
			}
			if (val == -1) {
				grid->Canvas->Brush->Color = clWhite;
			}
			else {
				//
			}
			grid->Canvas->FillRect(Rect);
			grid->Canvas->TextOut(Rect.Left, Rect.Top, grid->Cells[ACol][ARow]);
		}
		else {
			//
		}

		err = 0;
	}
	catch (Exception *ex) {
		err = -1;
		TLog::ErrFullSaveLog(ex);
		// AnsiString msg
		// programSettings.colorMSG = programSettings.colorBrak;
		// TExtFunction::UpdateStatusBar(programSettings.gsStatusBar, strStatus, _msg, programSettings.colorMSG);
		MessageDlg(ex->Message, mtError, TMsgDlgButtons() << mbOK, NULL);
	}
}
// ---------------------------------------------------------------------------

void __fastcall TfmShowZones::strGridThickDrawCell(TObject *Sender, int ACol, int ARow, TRect &Rect, TGridDrawState State) {
	TStringGrid* grid = static_cast<TStringGrid*>(Sender);
	int err = 0;
	double val = 0;
	try {
		if (ACol > 0 && ARow > 0) {
			AnsiString aStr = grid->Cells[ACol][ARow];
			val = TGlSettings::thresholdTDown;
			val = TGlSettings::thresholdTUp;
			// function TryStrToFloat(const S: string; out Value: Extended; const AFormatSettings: TFormatSettings): Boolean;
			if (TryStrToFloat(grid->Cells[ACol][ARow], val)) {
				if (val < TGlSettings::thresholdTDown || val > TGlSettings::thresholdTUp) {
					grid->Canvas->Brush->Color = clRed;
				}
				else {
					grid->Canvas->Brush->Color = clMoneyGreen;
				}
			}
			else {
				val = -1;
			}

			if (val == -1) {
				grid->Canvas->Brush->Color = clWhite;
			}
			else {
				//
			}
			grid->Canvas->FillRect(Rect);
			grid->Canvas->TextOut(Rect.Left, Rect.Top, grid->Cells[ACol][ARow]);
		}
		else {
			//
		}

		err = 0;
	}
	catch (Exception *ex) {
		err = -1;
		TLog::ErrFullSaveLog(ex);
		// AnsiString msg
		// programSettings.colorMSG = programSettings.colorBrak;
		// TExtFunction::UpdateStatusBar(programSettings.gsStatusBar, strStatus, _msg, programSettings.colorMSG);
		MessageDlg(ex->Message, mtError, TMsgDlgButtons() << mbOK, NULL);
	}
}

// ---------------------------------------------------------------------------
void __fastcall TfmShowZones::FormResize(TObject *Sender) {
	int err = 0;
	// верх
	PanelLong->Align = alNone;
	PanelCross->Height = SqlDBModule->GetIntFieldSQL("currentSettings", "ParamValueFloat", "isActual=1 and UPPER(ParamName)=UPPER('PanelCrossHeight')", 150, err);
	SplitterTop->Top = PanelCross->Height;
	// низ  PanelThickTop
	PanelThick->Height = SqlDBModule->GetIntFieldSQL("currentSettings", "ParamValueFloat", "isActual=1 and UPPER(ParamName)=UPPER('PanelThickHeight')", 150, err);
	SplitterMid->Top = PanelThick->Top - SplitterMid->Height;
	// середина
	PanelLong->Top = SplitterTop->Top + SplitterTop->Height;
	PanelLong->Align = alClient;
}
// ---------------------------------------------------------------------------

void __fastcall TfmShowZones::strGridCrossSelectCell(TObject *Sender, int ACol, int ARow, bool &CanSelect) {
	// static int LoadTubeCrossFromFile(AnsiString _fullFileName,AnsiString _head,short &zones,short &sensors_a,vector<int> &VZoneLength,
	// DynamicArray<double> &zone_data,vector<vector<double> > &sensor_data,vector<vector<vector<double> > > &Source_Data);

	int gmax_zones = 140;
	zone_data.set_length(gmax_zones);
	// Deads.resize(gmax_zones);
	VZoneLength.resize(gmax_zones);
    ZoneLength=200;
	for (int i = 0; i < gmax_zones; i++)
		VZoneLength[i] = ZoneLength;
	zones = 0;
	Source_Data.resize(gmax_zones);
	sensors_a = 12;
	sensor_data.resize(gmax_zones);
	for (int i = 0; i < gmax_zones; i++)
	{
		sensor_data[i].resize(sensors_a);
		Source_Data[i].resize(sensors_a);
	}
	if (OpenDialogFromFile->Execute()) {
		// ReadFromFile();
		TExtFunction::LoadTubeCrossFromFile(OpenDialogFromFile->FileName, "", zones, sensors_a, VZoneLength, zone_data, sensor_data, Source_Data);
	}
	else{
        //
    }

	//for (int zone = startZone; zone <= finalZone; zone++)
	//{
	//	for (int j = 0; j < (int)FilteredOut_Data[zone][sensor].size(); j++)
	//		_F->AddOut(FilteredOut_Data[zone][sensor][j] * gain[sensor],
	//		ZoneColor(FilteredOut_Data[zone][sensor][j] * gain[sensor],
   //			Deads[zone][j]));
   //	}
}
// ---------------------------------------------------------------------------

